#!/usr/bin/env zsh

autoload -Uz colors vcs_info add-zsh-hook
colors
setopt prompt_subst
add-zsh-hook precmd vcs_info

zstyle ':vcs_info:*'    enable git
zstyle ':vcs_info:git:*' check-for-changes true

# Show a marker when there are untracked files (uses vcs_info hook)
zstyle ':vcs_info:git*+set-message:*' hooks git-untracked join-markers

# Now that colors are initialized, these expand to real ANSI codes
zstyle ':vcs_info:git:*' formats " %{$reset_color%}[%{$fg[red]%}%b%m%{$reset_color%}]"

# Hook implementation for untracked indicator
#+vi-git-untracked appends a bang to the staged marker when untracked files exist
+vi-git-untracked(){
    if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
        git status --porcelain | grep '??' &> /dev/null ; then
        hook_com[misc]+="!"
    fi
}

# Join all status indicators into one block with a single leading space
+vi-join-markers(){
    local -a parts=()
    [[ -n ${hook_com[staged]} ]] && parts+="${hook_com[staged]}"
    [[ -n ${hook_com[unstaged]} ]] && parts+="${hook_com[unstaged]}"
    [[ -n ${hook_com[misc]} ]] && parts+="${hook_com[misc]}"
    if (( ${#parts[@]} > 0 )); then
        local joined
        joined="${(j::)parts}"
        hook_com[misc]="%{$reset_color%}|%{$fg[yellow]%}${joined}%{$reset_color%}"
    else
        hook_com[misc]=''
    fi
}

PROMPT='%n@%m %{$fg[blue]%}%~%{$reset_color%}${vcs_info_msg_0_} > '

